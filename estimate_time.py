import argparse
import csv

def estimate_time(eta_first_run_minutes, first_vram_usage, vram_usages):
    total_time_minutes = eta_first_run_minutes

    for vram_usage in vram_usages:
        scaling_factor = vram_usage / first_vram_usage
        estimated_time_minutes = eta_first_run_minutes * scaling_factor
        total_time_minutes += estimated_time_minutes

    return total_time_minutes

def format_time(minutes):
    hours = minutes / 60
    days = hours / 24
    return hours, days

def main():
    parser = argparse.ArgumentParser(description='Estimate the total time for all runs based on the VRAM usage from a CSV file.')
    parser.add_argument('--csv_file', type=str, required=True, help='Path to the CSV file generated by the experiments script')
    parser.add_argument('--eta_first_run', type=float, required=True, help='ETA for the first run in minutes')
    args = parser.parse_args()

    csv_file = args.csv_file
    eta_first_run_minutes = args.eta_first_run

    total_time_minutes = 0
    vram_usages = []

    # Read the first run's VRAM usage from the CSV file
    with open(csv_file, 'r') as file:
        reader = csv.reader(file)
        header = next(reader)  # Skip the header row
        first_row = next(reader)
        first_vram_usage = float(first_row[2])  # Assuming VRAM usage is in the third column

        for row in reader:
            vram_usage = float(row[2])
            vram_usages.append(vram_usage)

    total_time_minutes = estimate_time(eta_first_run_minutes, first_vram_usage, vram_usages)
    total_hours, total_days = format_time(total_time_minutes)

    print(f"Total time for all runs: {total_time_minutes:.2f} minutes ({total_hours:.2f} hours, {total_days:.2f} days)")

if __name__ == '__main__':
    main()
